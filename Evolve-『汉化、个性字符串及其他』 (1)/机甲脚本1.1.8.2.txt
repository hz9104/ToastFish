// ==UserScript==
// @name         自动机甲配置
// @namespace    http://tampermonkey.net/
// @version      1.1.8.2
// @description  try to take over the world!
// @downloadURL  https://gist.github.com/DSLM/d3a2945fdf911dc4614f32eb2e207267/raw/AutoMechForEvolve.user.js
// @author       DSLM
// @match        https://likexia.gitee.io/evolve/
// @match        https://wdjwxh.github.io/Evolve-Scripting-Edition/
// @match        https://wdjwxh.gitee.io/evolve-scripting-edition/
// @match        https://pmotschmann.github.io/Evolve/
// @grant        none
// @require      https://code.jquery.com/jquery-3.4.1.min.js
// ==/UserScript==

(function($) {
    'use strict';

    //机甲
	var XH_times = 0
	var XH2_times = 0
	var XH;
	var XH2;

	//初始化
	XH = window.setInterval(mechAuto, 1001);
	//尖塔
	localStorage.setItem("SpirePrepared", "false");
	XH2 = window.setInterval(spireTimeDataFunc, 5000);

    function mechAuto()
    {
		XH_times = XH_times + 1;
		//判断是否需要初始化
		if(XH_times > 500)
		{
			var XH_temp = XH
			XH_times = 0;
			XH = window.setInterval(mechAuto, 1001);
			clearInterval(XH_temp)
			return;
		}
        //未完全加载
        if(evolve.global.portal.spire == undefined) return;

        //造搜集的情况
        let buildColl = false;

        //没到脚本上限
        let ScriptSetting  = JSON.parse(localStorage.getItem('settings'))
        if(ScriptSetting && ScriptSetting["bld_m_portal-mechbay"])
        {
            //没到上限
            if(ScriptSetting["bld_m_portal-mechbay"] > evolve.global.portal.mechbay.count) buildColl = true;
            //机甲舱没满
            if(ScriptSetting["bld_m_portal-mechbay"] == -1  && evolve.actions.portal.prtl_spire.mechbay.cost.Supply() < evolve.global.portal.purifier.sup_max) buildColl = true;
            //不需要两个脚本
            if(ScriptSetting["autoMech"]) return;

        }
        else
        {
            //机甲舱没满
            if(evolve.actions.portal.prtl_spire.mechbay.cost.Supply() < evolve.global.portal.purifier.sup_max) buildColl = true;
        }
        //机甲仓没开完
        if(evolve.global.portal.mechbay.count > evolve.global.portal.mechbay.on) buildColl = true;



        let dropPra = document.getElementById("mechLab").getElementsByClassName("dropdown dropdown-menu-animation is-hoverable is-mobile-modal");
        let type = evolve.global.portal.spire.type;
        let boss = evolve.global.portal.spire.boss;
        let stat = evolve.global.portal.spire.status;

        let bossList = {
            fire_elm: "laser",
            water_elm: "plasma",
            rock_golem: "plasma",
            bone_golem: "missile",
            mech_dino: "tesla",
            plant: "flame",
            crazed: "kinetic",
            minotaur: "missile",
            ooze: "plasma",
            zombie: "flame",
            raptor: "kinetic",
            frost_giant: "plasma",
            swarm: "flame",
            dragon: "missile",
            mech_dragon: "tesla",
            construct: "tesla",
            beholder: "plasma",
            worm: "sonic",
            hydra: "plasma",
            colossus: "laser",
            lich: "shotgun",
            ape: "laser",
            bandit: "kinetic",
            croc: "sonic",
            djinni: "plasma",
            snake: "plasma",
            centipede: "plasma",
            spider: "flame",
            manticore: "plasma",
            fiend: "laser",
            bat: "sonic",
            medusa: "missile",
            ettin: "plasma",
            faceless: "tesla",
            enchanted: "laser",
            gargoyle: "shotgun",
            chimera: "kinetic",
            gorgon: "plasma",
            kraken: "tesla",
            homunculus: "flame"
        };

        //机甲体型问题
        let theBetter = {"medium" : (0.0075/mechSize("medium")), "large" : (0.01*2/mechSize("large")), "titan" : (0.012*4/mechSize("titan"))};
        let sizeStr = "large"

        //blu.equip 装备

        let equTemp = new Set();

        if(stat.humid)//潮湿
        {
            equTemp.add("seals")
        }
        if(stat.steam)//蒸汽
        {
            equTemp.add("shields")
        }
        if(stat.rain)//雨水
        {
            equTemp.add("seals")
        }
        if(stat.hail)//冰雹
        {
            if(!equTemp.has("shields"))
                equTemp.add("ablative")
        }
        if(stat.dust)//沙尘
        {
            equTemp.add("seals")
        }
        if(stat.radioactive)//放射性
        {
            equTemp.add("shields")
        }
        if(stat.corrosive)//腐蚀
        {
            equTemp.add("ablative")
        }
        if(stat.mountain)//多山
        {
            equTemp.add("grapple")
        }
        if(stat.dark)//黑暗
        {
            equTemp.add("infrared")
        }
        if(stat.freeze)//冰冻
        {
            equTemp.add("radiator")
        }
        if(stat.hot)//闷热
        {
            equTemp.add("coolant")
        }
        if(stat.quake)//地震
        {
            equTemp.add("stabilizer")
        }
        if(stat.fog)//迷雾
        {
            equTemp.add("sonar")
        }
        if(stat.chasm)//裂谷
        {
            equTemp.add("grapple")
        }

        //转换顺序
        let tempEquList = []
        let tempCounter = 1
        equTemp.forEach(function(item) {
            tempEquList[equTemp.size - tempCounter] = item
            tempCounter += 1
        });
        //默认添加
        let defaultEquList = ['special','shields','sonar','grapple','infrared','flare','radiator','coolant','ablative','stabilizer','seals'];
        let tempEquAdd = 0;
        for (var i=0; i < defaultEquList.length; i++)
        {
            if (!tempEquList.includes(defaultEquList[i]))
            {
                tempEquList[equTemp.size + tempEquAdd] = defaultEquList[i];
                tempEquAdd++;
            }
        }



        //blu.chassis 移动
        //wheel, tread, biped, quad, spider, hover
        //轮子, 踏板 ,双足, 四足 ,蜘蛛, 悬浮
        let eviList = {
            "smaller":
            {"sand":{"wheel":0.9,"tread":1.15,"biped":0.78,"quad":0.86,"spider":0.75,"hover":1},
            "swamp":{"wheel":0.35,"tread":0.55,"biped":0.68,"quad":0.58,"spider":0.9,"hover":1.35},
            "forest":{"wheel":1,"tread":1,"biped":1,"quad":1.25,"spider":0.82,"hover":0.65},
            "jungle":{"wheel":0.92,"tread":0.95,"biped":0.82,"quad":1,"spider":0.77,"hover":0.55},
            "rocky":{"wheel":0.65,"tread":0.65,"biped":0.48,"quad":0.95,"spider":1.25,"hover":0.82},
            "gravel":{"wheel":1,"tread":1.3,"biped":1,"quad":0.9,"spider":0.86,"hover":1},
            "muddy":{"wheel":0.85,"tread":0.88,"biped":0.85,"quad":0.68,"spider":0.92,"hover":1.15},
            "grass":{"wheel":1.3,"tread":1,"biped":1.25,"quad":1,"spider":1,"hover":1},
            "brush":{"wheel":0.9,"tread":1,"biped":0.92,"quad":0.95,"spider":1,"hover":0.78},
            "concrete":{"wheel":1.1,"tread":1,"biped":1,"quad":1,"spider":1,"hover":1}},
            "larger":
            {"sand":{"wheel":0.85,"tread":1.1,"biped":0.65,"quad":0.75,"spider":0.65,"hover":1},
            "swamp":{"wheel":0.18,"tread":0.4,"biped":0.5,"quad":0.42,"spider":0.78,"hover":1.2},
            "forest":{"wheel":1,"tread":0.95,"biped":0.95,"quad":1.2,"spider":0.75,"hover":0.48},
            "jungle":{"wheel":0.85,"tread":0.9,"biped":0.7,"quad":1,"spider":0.65,"hover":0.35},
            "rocky":{"wheel":0.5,"tread":0.5,"biped":0.4,"quad":0.9,"spider":1.2,"hover":0.68},
            "gravel":{"wheel":0.95,"tread":1.2,"biped":1,"quad":0.8,"spider":0.75,"hover":1},
            "muddy":{"wheel":0.58,"tread":0.72,"biped":0.7,"quad":0.5,"spider":0.82,"hover":1.08},
            "grass":{"wheel":1.2,"tread":1,"biped":1.2,"quad":0.95,"spider":1,"hover":1},
            "brush":{"wheel":0.8,"tread":1,"biped":0.85,"quad":0.9,"spider":0.95,"hover":0.7},
            "concrete":{"wheel":1,"tread":1,"biped":1,"quad":1,"spider":1,"hover":1}}};
        let eviNameList = ["wheel", "tread", "biped", "quad", "spider", "hover"];
        if(stat.windy)//风暴
        {
            eviList["smaller"][type]["wheel"] *=1
            eviList["smaller"][type]["tread"] *=1
            eviList["smaller"][type]["biped"] *=1
            eviList["smaller"][type]["quad"] *=1
            eviList["smaller"][type]["spider"] *=1
            eviList["smaller"][type]["hover"] *=0.5

            eviList["larger"][type]["wheel"] *=1
            eviList["larger"][type]["tread"] *=1
            eviList["larger"][type]["biped"] *=1
            eviList["larger"][type]["quad"] *=1
            eviList["larger"][type]["spider"] *=1
            eviList["larger"][type]["hover"] *=0.5
        }
        if(stat.hilly)//丘陵
        {
            eviList["smaller"][type]["wheel"] *=0.75
            eviList["smaller"][type]["tread"] *=0.75
            eviList["smaller"][type]["biped"] *=0.75
            eviList["smaller"][type]["quad"] *=0.75
            eviList["smaller"][type]["spider"] *=1
            eviList["smaller"][type]["hover"] *=0.75

            eviList["larger"][type]["wheel"] *=0.75
            eviList["larger"][type]["tread"] *=0.75
            eviList["larger"][type]["biped"] *=0.75
            eviList["larger"][type]["quad"] *=0.75
            eviList["larger"][type]["spider"] *=1
            eviList["larger"][type]["hover"] *=0.75
        }
        if(stat.river)//河流
        {
            eviList["smaller"][type]["wheel"] *=0.65
            eviList["smaller"][type]["tread"] *=0.65
            eviList["smaller"][type]["biped"] *=0.65
            eviList["smaller"][type]["quad"] *=0.65
            eviList["smaller"][type]["spider"] *=0.65
            eviList["smaller"][type]["hover"] *=1

            eviList["larger"][type]["wheel"] *=0.65
            eviList["larger"][type]["tread"] *=0.65
            eviList["larger"][type]["biped"] *=0.65
            eviList["larger"][type]["quad"] *=0.65
            eviList["larger"][type]["spider"] *=0.65
            eviList["larger"][type]["hover"] *=1
        }
        if(stat.tar)//焦油坑
        {
            eviList["smaller"][type]["wheel"] *=0.5
            eviList["smaller"][type]["tread"] *=0.5
            eviList["smaller"][type]["biped"] *=0.75
            eviList["smaller"][type]["quad"] *=1
            eviList["smaller"][type]["spider"] *=0.75
            eviList["smaller"][type]["hover"] *=0.75

            eviList["larger"][type]["wheel"] *=0.5
            eviList["larger"][type]["tread"] *=0.5
            eviList["larger"][type]["biped"] *=0.75
            eviList["larger"][type]["quad"] *=1
            eviList["larger"][type]["spider"] *=0.75
            eviList["larger"][type]["hover"] *=0.75
        }
        if(stat.flooded)//水淹
        {
            eviList["smaller"][type]["wheel"] *=0.35
            eviList["smaller"][type]["tread"] *=0.35
            eviList["smaller"][type]["biped"] *=0.35
            eviList["smaller"][type]["quad"] *=0.35
            eviList["smaller"][type]["spider"] *=0.35
            eviList["smaller"][type]["hover"] *=1

            eviList["larger"][type]["wheel"] *=0.35
            eviList["larger"][type]["tread"] *=0.35
            eviList["larger"][type]["biped"] *=0.35
            eviList["larger"][type]["quad"] *=0.35
            eviList["larger"][type]["spider"] *=0.35
            eviList["larger"][type]["hover"] *=1
        }

        if(stat.gravity)//重力
        {
            theBetter.medium *= 0.8;
            theBetter.large *= 0.45;
            theBetter.titan *= 0.25;
        }
        if(type == "concrete")//混凝土
        {
            theBetter.medium *= 0.95;
            theBetter.large *= 1;
            theBetter.titan *= 1.25;
        }

        let maxTempS = 0, maxTempL = 0, maxNumS = eviList["smaller"][type]["wheel"], maxNumL = eviList["larger"][type]["wheel"];
        for (var i=0;i<eviNameList.length;i++)
        {
            if(eviList["smaller"][type][eviNameList[i]] > maxNumS)
            {
                maxTempS = i;
                maxNumS = eviList["smaller"][type][eviNameList[i]];
            }
            if(eviList["larger"][type][eviNameList[i]] > maxNumL)
            {
                maxTempL = i;
                maxNumL = eviList["larger"][type][eviNameList[i]];
            }
        }
        theBetter.medium *= maxNumS;
        theBetter.large *= maxNumL;
        theBetter.titan *= maxNumL;

        //泰坦优势
        let titanExtra = {hydra:0.85, lich:0.75, snake:0.5, centipede:0.95, manticore:0.95, fiend:0.75, ettin:0.8,chimera:0.85, gorgon:0.65, kraken:0.85};
        if(Object.keys(titanExtra).includes(boss))
        {
            theBetter.titan *= (1 + (((1 - titanExtra[boss]) / 4) / titanExtra[boss]));
        }

        //设置
        /*
        0 体型
        1 移动
        2 武器
        3 武器
        4 武器
        5 武器
        6 装备
        7 装备
        8 装备
        9 装备
        10 装备
        */
        //体型
        let maxTemp = maxTempL;
        if(buildColl)
        {
            sizeStr = "collector"
            maxTemp = maxTempL;
        }
        else {
            if(theBetter.titan >= theBetter.large && theBetter.titan >= theBetter.medium)
            {
                sizeStr = "titan"
                maxTemp = maxTempL;
            }
            if(theBetter.large >= theBetter.medium && theBetter.large >= theBetter.titan)
            {
                sizeStr = "large"
                maxTemp = maxTempL;
            }
            if(theBetter.medium >= theBetter.large && theBetter.medium >= theBetter.titan)
            {
                sizeStr = "medium"
                maxTemp = maxTempS;
            }
        }
        var childs = dropPra[0].getElementsByClassName("dropdown-content")[0].childNodes
        for(var i = 0; i < childs.length; i++) {
            if(childs[i].getAttribute("data-val") == sizeStr)
            {
                childs[i].click();
                break;
            }
        }
        //移动
        var childs = dropPra[1].getElementsByClassName("dropdown-content")[0].childNodes
        for(var i = 0; i < childs.length; i++) {
            if(childs[i].getAttribute("data-val") == eviNameList[maxTemp])
            {
                childs[i].click();
                break;
            }
        }
        //武器
        let weaponSize = {"collector": 0, "medium" : 1, "large" : 2, "titan" : 4};
        for(var j = 0; j < weaponSize[sizeStr]; j++) {
            var childs = dropPra[2+j].getElementsByClassName("dropdown-content")[0].childNodes
            for(var i = 0; i < childs.length; i++) {
                if(childs[i].getAttribute("data-val") == bossList[boss])
                {
                    childs[i].click();
                    break;
                }
            }
        }
        //装备
        let equipSize = {"collector": 2, "medium" : 1, "large" : 2, "titan" : 4};
        for(var j = 0; j < equipSize[sizeStr] + (evolve.global.blood['prepared']? 1 : 0); j++) {
            var childs = dropPra[6+j].getElementsByClassName("dropdown-content")[0].childNodes
            for(var i = 0; i < childs.length; i++) {
                if(childs[i].getAttribute("data-val") == tempEquList[j])
                {
                    childs[i].click();
                    break;
                }
            }
        }

        //先关地狱化
        if(evolve.global.portal.mechbay.blueprint.infernal)
        {
            document.querySelector("#mechAssembly > div:nth-child(2) > label > input[type=checkbox]").click();
        }
        //搜集地狱化
        if(sizeStr == "collector" && evolve.global.blood.prepared >= 3)
        {
            document.querySelector("#mechAssembly > div:nth-child(2) > label > input[type=checkbox]").click();
        }


        var buildTimes;
        let size = mechSize(sizeStr);
        if(size > (evolve.global.portal.mechbay.max - evolve.global.portal.mechbay.bay))//空间不足
        {
            if(sizeStr == "collector")
            {
                return;
            }
            if(sameCheck())
            {
                return;
            }
            else
            {
                //拆到空间足够
                let nowSpace = evolve.global.portal.mechbay.max - evolve.global.portal.mechbay.bay;
                while(size > nowSpace)
                {
		    nowSpace += mechSize(evolve.global.portal.mechbay.mechs[0].size);
                    document.getElementById("mechList").__vue__.scrap(0)//拆
                }
                document.getElementById("mechAssembly").__vue__.build()//建造
            }
        }
        else
        {
            buildTimes = Math.floor(evolve.global.portal.purifier.supply / mechCost(sizeStr, false)["c"]);
            for(var i = 0; i < buildTimes; i++)
            {
                document.getElementById("mechAssembly").__vue__.build()//建造
            }
        }

    }

    function sameCheck()
    {
        if(evolve.global.portal.mechbay.blueprint.size != evolve.global.portal.mechbay.mechs[0].size)
        {
            return false;
        }
        if(evolve.global.portal.mechbay.blueprint.chassis != evolve.global.portal.mechbay.mechs[0].chassis)
        {
            return false;
        }
        if(evolve.global.portal.mechbay.blueprint.hardpoint.length != evolve.global.portal.mechbay.mechs[0].hardpoint.length)
        {
            return false;
        }
        for (var i = 0; i < evolve.global.portal.mechbay.blueprint.hardpoint.length; i++) {
            if(evolve.global.portal.mechbay.blueprint.hardpoint[i] != evolve.global.portal.mechbay.mechs[0].hardpoint[i])
            {
                return false;
            }
        }
        if(evolve.global.portal.mechbay.blueprint.equip.length != evolve.global.portal.mechbay.mechs[0].equip.length)
        {
            return false;
        }
        for (var i = 0; i < evolve.global.portal.mechbay.blueprint.equip.length; i++) {
            if(evolve.global.portal.mechbay.blueprint.equip[i] != evolve.global.portal.mechbay.mechs[0].equip[i])
            {
                return false;
            }
        }

        //都相同，考虑地狱化
        if(evolve.global.portal.mechbay.mechs[0].infernal)
        {
            return true;
        }
        document.querySelector("#mechAssembly > div:nth-child(2) > label > input[type=checkbox]").click();

        //算时间决定造多少
        let finishTime = 10000000000;
        if(evolve.global.portal.spire.time.includes("d") && evolve.global.portal.spire.time.includes("h"))
        {
            let tempTimeStr = evolve.global.portal.spire.time.split("d");
            finishTime = parseInt(tempTimeStr[0]) * 86400 + parseInt(tempTimeStr[1]) *3600;
        }
        else if(evolve.global.portal.spire.time.includes("h") && evolve.global.portal.spire.time.includes("m"))
        {
            let tempTimeStr = evolve.global.portal.spire.time.split("h");
            finishTime = parseInt(tempTimeStr[0]) * 3600 + parseInt(tempTimeStr[1]) *60;
        }
        else if(evolve.global.portal.spire.time.includes("m") && evolve.global.portal.spire.time.includes("s"))
        {
            let tempTimeStr = evolve.global.portal.spire.time.split("m");
            finishTime = parseInt(tempTimeStr[0]) * 60 + parseInt(tempTimeStr[1]);
        }
        else if(evolve.global.portal.spire.time.includes("s"))
        {
            finishTime = parseInt(evolve.global.portal.spire.time.includes("s"));
        }
        if(evolve.global.portal.purifier.supply == evolve.global.portal.purifier.sup_max ||
        ((evolve.global.portal.purifier.sup_max - evolve.global.portal.purifier.supply) / evolve.global.portal.purifier.diff) < finishTime)
        {
            //用完，或者用着剩下满
            useAmount = (evolve.global.portal.purifier.sup_max / evolve.global.portal.purifier.diff) < finishTime ? evolve.global.portal.purifier.supply : (finishTime * evolve.global.portal.purifier.diff + evolve.global.portal.purifier.supply - evolve.global.portal.purifier.sup_max);
            //满了全用
            useAmount = (evolve.global.portal.purifier.supply == evolve.global.portal.purifier.sup_max)? evolve.global.portal.purifier.supply: useAmount;
            buildTimes = Math.floor(useAmount / (mechCost(evolve.global.portal.mechbay.blueprint.size, true)["c"] - mechCost(evolve.global.portal.mechbay.blueprint.size, false)["c"]/3));
            for(var i = 0; i < buildTimes; i++)
            {
                document.getElementById("mechList").__vue__.scrap(0)//拆
                document.getElementById("mechAssembly").__vue__.build()//建造
            }
        }
        return true;
    }

    function spireTimeDataFunc()
    {
        var spireTimeData, nowRecord
		XH2_times = XH2_times + 1;
		//判断是否需要初始化
		if(XH2_times > 500)
		{
			var XH_temp = XH2
			XH2_times = 0;
			XH2 = window.setInterval(spireTimeDataFunc, 5000);
			clearInterval(XH_temp)
			return;
		}
        //显示
        //evolve.global.stats.spire["h"]['dlstr']
        let spireTimeDataText = $("#spireTimeDataText");

        if(spireTimeDataText.length === 0)
        {
            $('#stats').append($("<div><span class='has-text-warning'>地狱尖塔数据（保存100条数据）:</span></div>"));
            spireTimeDataText = $("<div id='spireTimeDataText'></div>");
            $('#stats').append(spireTimeDataText);

            spireTimeData = JSON.parse(localStorage.getItem("spireTimeData"));
            if(spireTimeData == null)
            {
                return;
            }

            for(var i = 0; i < spireTimeData["record"].length - 1; i++)
            {
                nowRecord = spireTimeData["record"][i]
                if(nowRecord["effi"] < spireTimeData["record"][i + 1]["effi"])
                {
                    spireTimeDataText.append($("<p class='has-text-success'>抵达 " + nowRecord["floor"] + " 层，花费 " + nowRecord["day"] + " 天，效率 " + nowRecord["effi"].toFixed(4) + " 天/层，鲜血之石 " + nowRecord["stone"] + " 个，效率 " + (nowRecord["effi"] / nowRecord["stone"]).toFixed(4) + " 天/个</p>"))
                }
                else
                {
                    spireTimeDataText.append($("<p class='has-text-danger'>抵达 " + nowRecord["floor"] + " 层，花费 " + nowRecord["day"] + " 天，效率 " + nowRecord["effi"].toFixed(4) + " 天/层，鲜血之石 " + nowRecord["stone"] + " 个，效率 " + (nowRecord["effi"] / nowRecord["stone"]).toFixed(4) + " 天/个</p>"))
                }
            }
            if(spireTimeData["record"].length > 0)
            {
                nowRecord = spireTimeData["record"][spireTimeData["record"].length - 1]
                    spireTimeDataText.append($("<p class='has-text-success'>抵达 " + nowRecord["floor"] + " 层，花费 " + nowRecord["day"] + " 天，效率 " + nowRecord["effi"].toFixed(4) + " 天/层，鲜血之石 " + nowRecord["stone"] + " 个，效率 " + (nowRecord["effi"] / nowRecord["stone"]).toFixed(4) + " 天/个</p>"))
            }

            return;
        }

        if(evolve.global.portal.spire == undefined) return;


        //刷新后初始化
        if(localStorage.getItem("SpirePrepared") == "false" && evolve.global.portal.spire.count)
        {
            localStorage.setItem("SpirePrepared", "true");
            spireTimeData = JSON.parse(localStorage.getItem("spireTimeData"));
            if(spireTimeData == null)
            {
                spireTimeData = {"now":evolve.global.portal.spire.count, "record":new Array()};
            }
            spireTimeData["now"] = evolve.global.portal.spire.count;
            localStorage.setItem("spireTimeData", JSON.stringify(spireTimeData));
        }

        //通层
        spireTimeData = JSON.parse(localStorage.getItem("spireTimeData"));
        if(evolve.global.portal.spire.count != spireTimeData["now"])
        {
            spireTimeData["record"].unshift({"floor":evolve.global.portal.spire.count,"day":evolve.global.stats.days, "effi":evolve.global.stats.days/(evolve.global.portal.spire.count - 1), "stone":evolve.alevel()*((evolve.global.genes['blood'] >= 2)?2:1),});
            spireTimeData["now"] = evolve.global.portal.spire.count;
            if(spireTimeData["record"].length > 100)
            {
                spireTimeData["record"].pop();
            }

            nowRecord = spireTimeData["record"][0]
            if(spireTimeData["record"].length > 1)
            {
                if(nowRecord["effi"] < spireTimeData["record"][1]["effi"])
                {
                    spireTimeDataText.prepend($("<p class='has-text-success'>抵达 " + nowRecord["floor"] + " 层，花费 " + nowRecord["day"] + " 天，效率 " + nowRecord["effi"].toFixed(4) + " 天/层，鲜血之石 " + nowRecord["stone"] + " 个，效率 " + (nowRecord["effi"] / nowRecord["stone"]).toFixed(4) + " 天/个</p>"))
                }
                else
                {
                    spireTimeDataText.prepend($("<p class='has-text-danger'>抵达 " + nowRecord["floor"] + " 层，花费 " + nowRecord["day"] + " 天，效率 " + nowRecord["effi"].toFixed(4) + " 天/层，鲜血之石 " + nowRecord["stone"] + " 个，效率 " + (nowRecord["effi"] / nowRecord["stone"]).toFixed(4) + " 天/个</p>"))
                }
            }
        }
        localStorage.setItem("spireTimeData", JSON.stringify(spireTimeData));
    }
    function mechSize(s)
    {
        switch (s){
            case 'small':
            return 2;
            case 'medium':
            return evolve.global.blood['prepared'] && evolve.global.blood.prepared >= 2 ? 4 : 5;
            case 'large':
            return evolve.global.blood['prepared'] && evolve.global.blood.prepared >= 2 ? 8 : 10;
            case 'titan':
            return evolve.global.blood['prepared'] && evolve.global.blood.prepared >= 2 ? 20 : 25;
            case 'collector':
            return 1;
            case 'default':
            return 25;
        }
    }
    function mechCost(size,infernal)
    {
        let soul = 9999;
        let cost = 10000000;
        switch (size){
            case 'small':
            {
                let baseCost = evolve.global.blood['prepared'] && evolve.global.blood.prepared >= 2 ? 50000 : 75000;
                cost = infernal ? baseCost * 2.5 : baseCost;
                soul = infernal ? 20 : 1;
            }
            break;
            case 'medium':
            {
                cost = infernal ? 450000 : 180000;
                soul = infernal ? 100 : 4;
            }
            break;
            case 'large':
            {
                cost = infernal ? 925000 : 375000;
                soul = infernal ? 500 : 20;
            }
            break;
            case 'titan':
            {
                cost = infernal ? 1500000 : 750000;
                soul = infernal ? 1500 : 75;
            }
            break;
            case 'collector':
            {
                let baseCost = evolve.global.blood['prepared'] && evolve.global.blood.prepared >= 2 ? 8000 : 10000;
                cost = infernal ? baseCost * 2.5 : baseCost;
                soul = 1;
            }
            break;
        }
        return { s: soul, c: cost };
    }
})(jQuery);
